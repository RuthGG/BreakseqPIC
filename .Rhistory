windowData <- TestDataset
TestDataset
View(windowData)
windowData$chromType<-ifelse(windowData$chr %in% c("chr13", "chr14", "chr15", "chr21", "chr22"), "Telocentric", "No-telocentric")
View(windowData)
windowData[windowData$chromType == "Telocentric",]
windowData$chromType == "Telocentric"
windowData[which(windowData$chromType == "Telocentric"),]
View(windowData)
windowData$chromType
windowData$chromType == "Telocentric"
which(windowData$chromType == "Telocentric")
windowData[which(windowData$chromType == "Telocentric"),]
pacman::p_load(foreign, ggplot2, MASS, Hmisc, reshape2, ordinal)
load("TestDataset.RData")
windowData <- TestDataset
windowData$chromType<-ifelse(windowData$chr %in% c("chr13", "chr14", "chr15", "chr21", "chr22"), "Telocentric", "No-telocentric")
windowData<-windowData[which(windowData$chromType == "Telocentric"),]
pacman::p_load(ggdist, ggplot2, gghalves, reshape2, patchwork)
windowData <- TestDataset
windowData$chromType<-ifelse(windowData$chr %in% c("chr13", "chr14", "chr15", "chr21", "chr22"), "Telocentric", "No-telocentric")
windowData<-windowData[which(windowData$chromType == "Telocentric"),]
# TestDataset<-windowData
# Melt data
windowDataMelted <- melt(windowData, id.vars = c( "donor", "chr", "chromType"))
# windowDataMelted$value <- as.numeric(windowDataMelted$value)
# Group info
windowDataMelted$dataGroup<- ifelse(windowDataMelted$variable %in% c("count.all", "count.telom", "count.centro", "count.big"), "Inversion counts",
ifelse(windowDataMelted$variable %in% c("cM.QN.sum.all", "cM.QN.sum.centro", "cM.QN.sum.telom", "cM.QN.sum.big"), "Inversion cM sum",
ifelse(windowDataMelted$variable %in% c("xperchr"), "CO/cell for each chromosome",
ifelse(windowDataMelted$variable %in% c("cells"), "Individual cells",
ifelse(windowDataMelted$variable %in% c("crossovers"), "Absolute crossover count for each chromosome",
ifelse(windowDataMelted$variable %in% c("totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains"), "Arm aberrations",  "Other aberrations"))))))
# Make list of plots
plot_list<-list()
for (group in unique(windowDataMelted$dataGroup)) {
plotTable <- windowDataMelted[(windowDataMelted$value != -Inf) & (windowDataMelted$dataGroup == group),]
if(group %in% c("Individual cells")){
plotTable<-unique(plotTable[,c("donor", "variable", "value")])
plotTable$chr<-"all"
plotTable$chromType <-"all"
}
plot_list[[group]] <- ggplot(plotTable, aes(x = variable, y = value))+
# Half violin
ggdist::stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2, point_colour = NA) +
# Boxplot
geom_boxplot(width = .1, outlier.shape = NA) +
# Points
gghalves::geom_half_point_panel(side = "l", range_scale = .6,  alpha = .5, aes(color = chr))+
# scale_color_manual(values = c(rep("#3c7ae7",11),rep("#89b23e",11) ))+
# Adjust coordinates
coord_flip()+
# coord_flip( xlim = c(1.3, NA))+
# Adjust labels
theme(axis.title.y = element_blank(), legend.position = "top")+
# Title
ggtitle(group)
}
name = "Distribution of variables"
# Plot list of plots
wrap_plots(plot_list)+ plot_annotation( title = name)+plot_layout(guides = 'collect') & theme(legend.position = 'top')
group<-"Individual CO rate"
alltab<-data.frame("CountGroups" = c(0))
for (category in c( "totalStructuralVariants", "totalWholeAneuploidies" , "totalWholeLosses", "totalWholeGains", "totalArmLevelStructuralVariants" ,"totalArmLosses", "totalArmGains" )) {
df<-data.frame(table(TestDataset_notelo[,category]))
colnames(df)<-c("CountGroups", category)
alltab<-merge( alltab, df, by = "CountGroups", all=T)
}
if (!require("pacman")) install.packages("pacman")
# set conditions for code output
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE,fig.pos = "!H")
showcode=FALSE #for include or echo - echo=showcode
runbash=TRUE # for eval=runbash
runR=TRUE #for eval=runR
pacman::p_load(foreign, ggplot2, MASS, Hmisc, reshape2, ordinal)
load("TestDataset.RData")
pacman::p_load(ggdist, ggplot2, gghalves, reshape2, patchwork)
windowData <- TestDataset
windowData$chromType<-ifelse(windowData$chr %in% c("chr13", "chr14", "chr15", "chr21", "chr22"), "Telocentric", "No-telocentric")
# Melt data
windowDataMelted <- melt(windowData, id.vars = c( "donor", "chr", "chromType"))
# windowDataMelted$value <- as.numeric(windowDataMelted$value)
# Group info
windowDataMelted$dataGroup<- ifelse(windowDataMelted$variable %in% c("count.all", "count.telom", "count.centro", "count.big"), "Inversion counts",
ifelse(windowDataMelted$variable %in% c("cM.QN.sum.all", "cM.QN.sum.centro", "cM.QN.sum.telom", "cM.QN.sum.big"), "Inversion cM sum",
ifelse(windowDataMelted$variable %in% c("xperchr"), "CO/cell for each chromosome",
ifelse(windowDataMelted$variable %in% c("cells"), "Individual cells",
ifelse(windowDataMelted$variable %in% c("crossovers"), "Absolute crossover count for each chromosome",
ifelse(windowDataMelted$variable %in% c("totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains"), "Arm aberrations",  "Other aberrations"))))))
# Make list of plots
plot_list<-list()
for (group in unique(windowDataMelted$dataGroup)) {
plotTable <- windowDataMelted[(windowDataMelted$value != -Inf) & (windowDataMelted$dataGroup == group),]
if(group %in% c("Individual cells")){
plotTable<-unique(plotTable[,c("donor", "variable", "value")])
plotTable$chr<-"all"
plotTable$chromType <-"all"
}
plot_list[[group]] <- ggplot(plotTable, aes(x = variable, y = value))+
# Half violin
ggdist::stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2, point_colour = NA) +
# Boxplot
geom_boxplot(width = .1, outlier.shape = NA) +
# Points
gghalves::geom_half_point_panel(side = "l", range_scale = .6,  alpha = .5, aes(color = chromType))+
# scale_color_manual(values = c(rep("#3c7ae7",11),rep("#89b23e",11) ))+
# Adjust coordinates
coord_flip()+
# coord_flip( xlim = c(1.3, NA))+
# Adjust labels
theme(axis.title.y = element_blank(), legend.position = "top")+
# Title
ggtitle(group)
}
name = "Distribution of variables"
# Plot list of plots
wrap_plots(plot_list)+ plot_annotation( title = name)+plot_layout(guides = 'collect') & theme(legend.position = 'top')
group<-"Individual CO rate"
pacman::p_load(ggdist, ggplot2, gghalves, reshape2, patchwork)
windowData <- TestDataset
windowData$chromType<-ifelse(windowData$chr %in% c("chr13", "chr14", "chr15", "chr21", "chr22"), "Telocentric", "No-telocentric")
windowData<-windowData[windowData$chromType != "Telocentric",]
TestDataset_notelo<-windowData
# Melt data
windowDataMelted <- melt(windowData, id.vars = c( "donor", "chr", "chromType"))
# windowDataMelted$value <- as.numeric(windowDataMelted$value)
# Group info
windowDataMelted$dataGroup<- ifelse(windowDataMelted$variable %in% c("count.all", "count.telom", "count.centro", "count.big"), "Inversion counts",
ifelse(windowDataMelted$variable %in% c("cM.QN.sum.all", "cM.QN.sum.centro", "cM.QN.sum.telom", "cM.QN.sum.big"), "Inversion cM sum",
ifelse(windowDataMelted$variable %in% c("xperchr"), "CO/cell for each chromosome",
ifelse(windowDataMelted$variable %in% c("cells"), "Individual cells",
ifelse(windowDataMelted$variable %in% c("crossovers"), "Absolute crossover count for each chromosome",
ifelse(windowDataMelted$variable %in% c("totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains"), "Arm aberrations",  "Other aberrations"))))))
# Make list of plots
plot_list<-list()
for (group in unique(windowDataMelted$dataGroup)) {
plotTable <- windowDataMelted[(windowDataMelted$value != -Inf) & (windowDataMelted$dataGroup == group),]
if(group %in% c("Individual cells")){
plotTable<-unique(plotTable[,c("donor", "variable", "value")])
plotTable$chr<-"all"
plotTable$chromType <-"all"
}
plot_list[[group]] <- ggplot(plotTable, aes(x = variable, y = value))+
# Half violin
ggdist::stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2, point_colour = NA) +
# Boxplot
geom_boxplot(width = .1, outlier.shape = NA) +
# Points
gghalves::geom_half_point_panel(side = "l", range_scale = .6,  alpha = .5, aes(color = chr))+
# scale_color_manual(values = c(rep("#3c7ae7",11),rep("#89b23e",11) ))+
# Adjust coordinates
coord_flip()+
# coord_flip( xlim = c(1.3, NA))+
# Adjust labels
theme(axis.title.y = element_blank(), legend.position = "top")+
# Title
ggtitle(group)
}
name = "Distribution of variables"
# Plot list of plots
wrap_plots(plot_list)+ plot_annotation( title = name)+plot_layout(guides = 'collect') & theme(legend.position = 'top')
group<-"Individual CO rate"
pacman::p_load(ggdist, ggplot2, gghalves, reshape2, patchwork)
windowData <- TestDataset
windowData$chromType<-ifelse(windowData$chr %in% c("chr13", "chr14", "chr15", "chr21", "chr22"), "Telocentric", "No-telocentric")
windowData<-windowData[which(windowData$chromType == "Telocentric"),]
TestDataset_telo<-windowData
# Melt data
windowDataMelted <- melt(windowData, id.vars = c( "donor", "chr", "chromType"))
# windowDataMelted$value <- as.numeric(windowDataMelted$value)
# Group info
windowDataMelted$dataGroup<- ifelse(windowDataMelted$variable %in% c("count.all", "count.telom", "count.centro", "count.big"), "Inversion counts",
ifelse(windowDataMelted$variable %in% c("cM.QN.sum.all", "cM.QN.sum.centro", "cM.QN.sum.telom", "cM.QN.sum.big"), "Inversion cM sum",
ifelse(windowDataMelted$variable %in% c("xperchr"), "CO/cell for each chromosome",
ifelse(windowDataMelted$variable %in% c("cells"), "Individual cells",
ifelse(windowDataMelted$variable %in% c("crossovers"), "Absolute crossover count for each chromosome",
ifelse(windowDataMelted$variable %in% c("totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains"), "Arm aberrations",  "Other aberrations"))))))
# Make list of plots
plot_list<-list()
for (group in unique(windowDataMelted$dataGroup)) {
plotTable <- windowDataMelted[(windowDataMelted$value != -Inf) & (windowDataMelted$dataGroup == group),]
if(group %in% c("Individual cells")){
plotTable<-unique(plotTable[,c("donor", "variable", "value")])
plotTable$chr<-"all"
plotTable$chromType <-"all"
}
plot_list[[group]] <- ggplot(plotTable, aes(x = variable, y = value))+
# Half violin
ggdist::stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2, point_colour = NA) +
# Boxplot
geom_boxplot(width = .1, outlier.shape = NA) +
# Points
gghalves::geom_half_point_panel(side = "l", range_scale = .6,  alpha = .5, aes(color = chr))+
# scale_color_manual(values = c(rep("#3c7ae7",11),rep("#89b23e",11) ))+
# Adjust coordinates
coord_flip()+
# coord_flip( xlim = c(1.3, NA))+
# Adjust labels
theme(axis.title.y = element_blank(), legend.position = "top")+
# Title
ggtitle(group)
}
name = "Distribution of variables"
# Plot list of plots
wrap_plots(plot_list)+ plot_annotation( title = name)+plot_layout(guides = 'collect') & theme(legend.position = 'top')
group<-"Individual CO rate"
alltab<-data.frame("CountGroups" = c(0))
for (category in c( "totalStructuralVariants", "totalWholeAneuploidies" , "totalWholeLosses", "totalWholeGains", "totalArmLevelStructuralVariants" ,"totalArmLosses", "totalArmGains" )) {
df<-data.frame(table(TestDataset_notelo[,category]))
colnames(df)<-c("CountGroups", category)
alltab<-merge( alltab, df, by = "CountGroups", all=T)
}
knitr::kable(alltab, caption = "Original category counts for non-telocentric chromosomes")
alltab<-data.frame("CountGroups" = c(0))
for (category in c( "totalStructuralVariants", "totalWholeAneuploidies" ,"totalWholeLosses", "totalWholeGains", "totalArmLevelStructuralVariants" ,"totalArmLosses", "totalArmGains" )) {
df<-data.frame(table(TestDataset_telo[,category]))
colnames(df)<-c("CountGroups", category)
alltab<-merge( alltab, df, by = "CountGroups", all=T)
}
knitr::kable(alltab, caption = "Original category counts for telocentric chromosomes")
alltab<-data.frame("CountGroups" = c(0))
for (category in c( "totalStructuralVariants", "totalWholeAneuploidies" ,"totalWholeLosses", "totalWholeGains", "totalArmLevelStructuralVariants" ,"totalArmLosses", "totalArmGains" )) {
# Store vector
fill<-TestDataset[,category]
# Reassign category
category<- paste0(category,"Category")
# Copy vector
TestDataset[,category]<-as.factor(fill)
# Reassign levels
lev<-levels(TestDataset[,category])
catcon<- (3-length(lev))*-1
levels(TestDataset[,category])<-  c(c("0", "1", "2"), rep("3+",catcon))
df<-data.frame(table(TestDataset[,category]))
colnames(df)<-c("CountGroups", category)
alltab<-merge( alltab, df, by = "CountGroups", all=T)
}
knitr::kable(alltab, caption = "New category counts")
if (!require("pacman")) install.packages("pacman")
# set conditions for code output
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE,fig.pos = "!H")
showcode=FALSE #for include or echo - echo=showcode
runbash=TRUE # for eval=runbash
runR=TRUE #for eval=runR
pacman::p_load(foreign, ggplot2, MASS, Hmisc, reshape2, ordinal)
load("TestDataset.RData")
load(file= "analysisParams.RData")
pacman::p_load(ggdist, ggplot2, gghalves, reshape2, patchwork)
windowData <- TestDataset
windowData$chromType<-ifelse(windowData$chr %in% c("chr13", "chr14", "chr15", "chr21", "chr22"), "Telocentric", "No-telocentric")
# Melt data
windowDataMelted <- melt(windowData, id.vars = c( "donor", "chr", "chromType"))
# windowDataMelted$value <- as.numeric(windowDataMelted$value)
# Group info
windowDataMelted$dataGroup<- ifelse(windowDataMelted$variable %in% c("count.all", "count.telom", "count.centro", "count.big"), "Inversion counts",
ifelse(windowDataMelted$variable %in% c("cM.QN.sum.all", "cM.QN.sum.centro", "cM.QN.sum.telom", "cM.QN.sum.big"), "Inversion cM sum",
ifelse(windowDataMelted$variable %in% c("xperchr"), "CO/cell for each chromosome",
ifelse(windowDataMelted$variable %in% c("cells"), "Individual cells",
ifelse(windowDataMelted$variable %in% c("crossovers"), "Absolute crossover count for each chromosome",
ifelse(windowDataMelted$variable %in% c("totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains"), "Arm aberrations",  "Other aberrations"))))))
# Make list of plots
plot_list<-list()
for (group in unique(windowDataMelted$dataGroup)) {
plotTable <- windowDataMelted[(windowDataMelted$value != -Inf) & (windowDataMelted$dataGroup == group),]
if(group %in% c("Individual cells")){
plotTable<-unique(plotTable[,c("donor", "variable", "value")])
plotTable$chr<-"all"
plotTable$chromType <-"all"
}
plot_list[[group]] <- ggplot(plotTable, aes(x = variable, y = value))+
# Half violin
ggdist::stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2, point_colour = NA) +
# Boxplot
geom_boxplot(width = .1, outlier.shape = NA) +
# Points
gghalves::geom_half_point_panel(side = "l", range_scale = .6,  alpha = .5, aes(color = chromType))+
# scale_color_manual(values = c(rep("#3c7ae7",11),rep("#89b23e",11) ))+
# Adjust coordinates
coord_flip()+
# coord_flip( xlim = c(1.3, NA))+
# Adjust labels
theme(axis.title.y = element_blank(), legend.position = "top")+
# Title
ggtitle(group)
}
name = "Distribution of variables"
# Plot list of plots
wrap_plots(plot_list)+ plot_annotation( title = name)+plot_layout(guides = 'collect') & theme(legend.position = 'top')
group<-"Individual CO rate"
pacman::p_load(ggdist, ggplot2, gghalves, reshape2, patchwork)
windowData <- TestDataset
windowData$chromType<-ifelse(windowData$chr %in% c("chr13", "chr14", "chr15", "chr21", "chr22"), "Telocentric", "No-telocentric")
if (useTelocentric == F) {
print("Using only non-telocentric chromosomes")
windowData<-windowData[windowData$chromType != "Telocentric",]
}else{
print("Using only telocentric chromosomes")
windowData<-windowData[windowData$chromType == "Telocentric",]
}
TestDataset<-windowData
# Melt data
windowDataMelted <- melt(windowData, id.vars = c( "donor", "chr", "chromType"))
# windowDataMelted$value <- as.numeric(windowDataMelted$value)
# Group info
windowDataMelted$dataGroup<- ifelse(windowDataMelted$variable %in% c("count.all", "count.telom", "count.centro", "count.big"), "Inversion counts",
ifelse(windowDataMelted$variable %in% c("cM.QN.sum.all", "cM.QN.sum.centro", "cM.QN.sum.telom", "cM.QN.sum.big"), "Inversion cM sum",
ifelse(windowDataMelted$variable %in% c("xperchr"), "CO/cell for each chromosome",
ifelse(windowDataMelted$variable %in% c("cells"), "Individual cells",
ifelse(windowDataMelted$variable %in% c("crossovers"), "Absolute crossover count for each chromosome",
ifelse(windowDataMelted$variable %in% c("totalArmLevelStructuralVariants", "totalArmLosses", "totalArmGains"), "Arm aberrations",  "Other aberrations"))))))
# Make list of plots
plot_list<-list()
for (group in unique(windowDataMelted$dataGroup)) {
plotTable <- windowDataMelted[(windowDataMelted$value != -Inf) & (windowDataMelted$dataGroup == group),]
if(group %in% c("Individual cells")){
plotTable<-unique(plotTable[,c("donor", "variable", "value")])
plotTable$chr<-"all"
plotTable$chromType <-"all"
}
plot_list[[group]] <- ggplot(plotTable, aes(x = variable, y = value))+
# Half violin
ggdist::stat_halfeye(adjust = .5, width = .6, .width = 0, justification = -.2, point_colour = NA) +
# Boxplot
geom_boxplot(width = .1, outlier.shape = NA) +
# Points
gghalves::geom_half_point_panel(side = "l", range_scale = .6,  alpha = .5, aes(color = chr))+
# scale_color_manual(values = c(rep("#3c7ae7",11),rep("#89b23e",11) ))+
# Adjust coordinates
coord_flip()+
# coord_flip( xlim = c(1.3, NA))+
# Adjust labels
theme(axis.title.y = element_blank(), legend.position = "top")+
# Title
ggtitle(group)
}
name = "Distribution of variables"
# Plot list of plots
wrap_plots(plot_list)+ plot_annotation( title = name)+plot_layout(guides = 'collect') & theme(legend.position = 'top')
group<-"Individual CO rate"
View(windowData)
alltab<-data.frame("CountGroups" = c(0))
for (category in c( "totalStructuralVariants", "totalWholeAneuploidies" , "totalWholeLosses", "totalWholeGains", "totalArmLevelStructuralVariants" ,"totalArmLosses", "totalArmGains" )) {
df<-data.frame(table(TestDataset[,category]))
colnames(df)<-c("CountGroups", category)
alltab<-merge( alltab, df, by = "CountGroups", all=T)
}
knitr::kable(alltab, caption = "Original category counts")
alltab<-data.frame("CountGroups" = c(0))
for (category in c( "totalStructuralVariants", "totalWholeAneuploidies" , "totalWholeLosses", "totalWholeGains", "totalArmLevelStructuralVariants" ,"totalArmLosses", "totalArmGains" )) {
# Store vector
fill<-TestDataset[,category]
# Reassign category
category<- paste0(category,"Category")
# Copy vector
TestDataset[,category]<-as.factor(fill)
# Reassign levels
lev<-levels(TestDataset[,category])
catcon<- (3-length(lev))*-1
levels(TestDataset[,category])<-  c(c("0", "1", "2"), rep("3+",catcon))
df<-data.frame(table(TestDataset[,category]))
colnames(df)<-c("CountGroups", category)
alltab<-merge( alltab, df, by = "CountGroups", all=T)
}
alltab
length(lev)
(3-length(lev))*-1
category
# Store vector
fill<-TestDataset[,category]
fill
TestDataset[,category]
setwd("/run/user/1001/gvfs/sftp:host=193.109.175.178,user=rgomez/nfs/pic.es/user/r/rgomez/20210325_breakseq/code/rscript")
setwd("../../analysis/2022-11-21_1kgp_highcov_static_v2.4.1.300_v38/data/datos_librerias/")
# Alignment
samfile_original<-read.table("coordCheck/result", comment.char = "@", sep = "\t",fill = T, stringsAsFactors = F)
samfile_original
samfile<-samfile_original[,c(1,3,4,6)]
samfile
colnames(samfile)<-c("Probe", "Chromosome", "Coordinate", "CIGAR")
View(samfile)
# The coordinates
coords<-read.table(paste0("bplib.coords"), stringsAsFactors = F)
colnames(coords)<-c("Probe", "Chromosome", "Start", "End", "Length")
View(coords)
# Merge
check<-merge(coords, samfile, all.x = T, by = "Probe", suffixes = c("Coords", "Bowtie"))
View(check)
check$Result<- ifelse(( check$ChromosomeCoords == check$ChromosomeBowtie & check$Start == check$Coordinate & check$CIGAR == "300M"), "Good", NA )
notREF<-samfile[ !(samfile$Probe %in% coords$Probe), ]
View(notREF)
notREF<-notREF[!(notREF$CIGAR %in% c("*", "", " ", NA)),]
notREF<-merge(notREF, samfile_original[,c(1,5)], by.x = "Probe", by.y = "V1", all.x = TRUE)
colnames(notREF)[5]<-"MAPQ"
144660127-144679934
View(coords)
setwd("../../  ../")
setwd("/run/user/1001/gvfs/sftp:host=193.109.175.178,user=rgomez/nfs/pic.es/user/r/rgomez/20210325_breakseq/code/rscript")
setwd("../../")
# Example
args[1]<-"analysis/2022-11-21_1kgp_highcov_static_v2.4.1.300_v38//"  # Final read counts
# LOAD ARGUMENTS
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
# Example
args[1]<-"analysis/2022-11-21_1kgp_highcov_static_v2.4.1.300_v38//"  # Final read counts
reads<-read.table(paste0(args[1],"/03_processaligned/Results_reads.txt"))
colnames(reads)<-c("inversion", "genotype", "breakpoint", "individual", "Total_reads")
reads<-reads[order(as.character(reads$genotype)),]
# New strategy, each probe has a relative weight
readfilter<-read.table(paste0(args[1],"03_processaligned/readFiltering.txt"), header = T, sep = "\t" ,fill = T)
summarized<-data.frame(fa=paste0(readfilter$orientation, readfilter$inversion), Freq=readfilter$efficiency.check, inv = readfilter$inversion)
probecount<-aggregate( Freq~ fa + inv,  summarized, sum)
rownames(probecount)<-probecount$fa
invcount<-aggregate(Freq ~ inv, probecount, sum)
rownames(invcount)<-invcount$inv
# Aggregate in general
general<-aggregate( genotype  ~ inversion + individual,  reads, paste, collapse = "/")
View(general)
#  Take unique factors
reads_small<-reads[, c("inversion", "genotype", "individual")]
reads_small<-unique(reads_small)
# Count unique factors
counted.ag<-data.frame(table(reads_small$inversion, reads_small$individual))
colnames(counted.ag)<-c("inversion", "individual", "genotypes_aggregated_count")
# Aggregate unique
aggregated<-aggregate( genotype  ~ inversion + individual,  reads_small, paste, collapse = "/")
colnames(aggregated)<-c( "inversion",  "individual", "genotype_aggregated"  )
# Count reads
readscount<-aggregate( Total_reads  ~ inversion + individual,  reads, sum)
View(readscount)
genotable<-Reduce(function(x,y) merge(x = x, y = y, all = TRUE), list(general, aggregated, counted.ag, readscount))
View(genotable)
# Calculate error probability
genotable$p.error<-1
genotable[genotable$genotypes_aggregated_count > 1, "p.error"]<-0
tmp<-genotable[genotable$genotypes_aggregated_count == 1 & genotable$Total_reads >1,]
tmp$probe<-paste0(tmp$genotype_aggregated, tmp$inversion)
tmp$probefreq<-probecount[tmp$probe,"Freq"]
tmp$invcount<-invcount[tmp$inversion, "Freq"]
# now the formula!
# probability of mine  ^ probes = error calculation = probability of not detecting the other
tmp$p.error<- (tmp$probefreq / tmp$invcount)^tmp$Total_reads
View(tmp)
tmp<-genotable[genotable$genotypes_aggregated_count == 1 & genotable$Total_reads >1,]
tmp$probe<-paste0(tmp$genotype_aggregated, tmp$inversion)
tmp$invcount<-invcount[tmp$inversion, "Freq"]
View(invcount)
View(probecount)
View(summarized)
# Now with het individuals
tmp<-genotable[genotable$genotypes_aggregated_count > 1,]
View(tmp)
tmp$inversion<-as.character(tmp$inversion)
tmp$individual<-as.character(tmp$individual)
tmp$p.error<-apply(tmp, 1, function(x){
counts<-data.frame(table(as.character(reads[reads$inversion ==  x["inversion"] & reads$individual == x["individual"], "genotype"] )))
x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Freq >= 2,])), 0, 1 )
})
x<-tmp[42953]
x<-tmp[42953,]
reads[reads$inversion ==  x["inversion"] & reads$individual == x["individual"], "genotype"]
reads
reads$inversion ==  x["inversion"]
x["inversion"]
x<-tmp[42953,]
x
x<-tmp["42953",]
x
reads[reads$inversion ==  x["inversion"] & reads$individual == x["individual"]
,"genotype"]
reads$individual == x["individual"]
reads$individual
x["individual"]
reads$individual<-as.character(reads$individual)
reads$inversion<-as.character(reads$inversion)
tmp$p.error<-apply(tmp, 1, function(x){
counts<-data.frame(table(as.character(reads[reads$inversion ==  x["inversion"] & reads$individual == x["individual"], "genotype"] )))
x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Freq >= 2,])), 0, 1 )
})
reads[reads$inversion ==  x["inversion"] & reads$individual == x["individual"], "genotype"]
reads$inversion ==  x["inversion"]
reads$inversion
x["inversion"]
View(reads)
[reads$inversion %in%  x["inversion"]
reads$inversion %in%  x["inversion"]
reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"], "genotype"]
reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"],]
data.frame(table(as.character(reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"], "genotype"]
)))
# esto solo mira que haya mas de una sonda!!
# counts<-data.frame(table(as.character(reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"], "genotype"] )))
# x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Freq >= 2,])), 0, 1 )
aggregate( Total_reads ~ genotype ,  (reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"],] , sum)
})
# esto solo mira que haya mas de una sonda!!
# counts<-data.frame(table(as.character(reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"], "genotype"] )))
# x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Freq >= 2,])), 0, 1 )
aggregate( Total_reads ~ genotype ,  reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"],] , sum)
x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Total_reads >= 2,])), 0, 1 )
# esto solo mira que haya mas de una sonda!!
# counts<-data.frame(table(as.character(reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"], "genotype"] )))
# x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Freq >= 2,])), 0, 1 )
counts<-aggregate( Total_reads ~ genotype ,  reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"],] , sum)
x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Total_reads >= 2,])), 0, 1 )
x["p.error"]
tmp$p.error<-apply(tmp, 1, function(x){
# esto solo mira que haya mas de una sonda!!
# counts<-data.frame(table(as.character(reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"], "genotype"] )))
# x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Freq >= 2,])), 0, 1 )
counts<-aggregate( Total_reads ~ genotype ,  reads[reads$inversion %in%  x["inversion"] & reads$individual %in% x["individual"],] , sum)
x["p.error"] <- ifelse(  (nrow(counts)  ==   nrow(counts[counts$Total_reads >= 2,])), 0, 1 )
})
