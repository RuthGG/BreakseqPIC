filesam<-read.table(file, stringsAsFactors = F)
if (is.null(filesam$V2)){
filesam$V2 <-1
}
filesam<-aggregate( V2  ~ V1, filesam, sum)
colnames(filesam)<-c("probe", paste0("count.",i))
tablelist[[i]]<-filesam
}
fasta<-read.table(args[4], stringsAsFactors = F)
fasta<-fasta[grep("^>", fasta$V1),]
fasta<-as.data.frame(sub(">", "", fasta ))
colnames(fasta)<-"probe"
tablelist[["fasta"]]<-fasta
View(fasta)
View(tablelist)
summary_probes<-Reduce(function(x,y) merge(x = x, y = y, by = "probe", all=TRUE),
tablelist)
View(summary_probes)
# Now with reads
summary_probes$code<-substr(summary_probes$probe, 1, 15)
reads<-read.table(args[2])
reads$code<-paste0(reads$V2, reads$V1, reads$V3)
reads_counted<-aggregate( V5  ~ code, reads, sum)
colnames(reads_counted)<-c("code", "count.qc")
summary_probes<-merge(summary_probes, reads_counted, by = "code", all = TRUE)
summary_probes[is.na(summary_probes)]<-0
summary_probes$code<-NULL
# Mark statistically divergent probes
# without probes
summary_probes$diagnosis1<-ifelse(  summary_probes$count.qc == 0 ,
(ifelse(substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"), "emptyRef", "emptyAlt"))
, NA)
#  undetected or filtered
summary_probes$diagnosis2<-ifelse(summary_probes$count.ini == 0, "failedDetection,",
ifelse(summary_probes$count.fil == 0, "allFiltered", NA))
# Error match
summary_probes$diagnosis3<-ifelse( substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"),
# if is std,
ifelse(summary_probes$count.uni != 0, "errorMatches", NA),
# if is alt
ifelse(summary_probes$count.xun != 0, "errorMatches", NA)
)
# Merge
summary_probes$diagnosis<-paste(summary_probes$diagnosis1, summary_probes$diagnosis2, summary_probes$diagnosis3, sep  =",")
summary_probes$diagnosis<-gsub("NA" ,"", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub(",," ,",", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub("^," ,"", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub(",$" ,"", summary_probes$diagnosis)
summary_probes$diagnosis1<-summary_probes$diagnosis2<-summary_probes$diagnosis3<-NULL
# Write
# LOAD ARGUMENTS
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
args[1]<-"tmp/2021-09-20_v2.3.2_downloadReadsCheck/02_breakseq/" # Path with ini fil uni xun
args[2]<-"analysis/2021-09-20_v2.3.2_downloadReadsCheck/03_processaligned/Results_reads.txt"  # Final read counts
args[3]<-"analysis/2021-09-20_v2.3.2_downloadReadsCheck/04_qualityanalysis/" #Output path
args[4]<-"analysis/2021-09-20_v2.3.2_downloadReadsCheck/data/datos_librerias/bplib.fa"
# # Test if there is at least one argument: if not, return an error
if (length(args)<4) {
stop("One input file, one sample names file, one reference genotypes file, one output directory, a coordinates file", call.=FALSE)
}
pathname<-args[1]
tablelist<-list()
for (i in c("ini", "fil", "xun", "uni")) {
file <- paste0(pathname, i, "sam_summary")
filesam<-read.table(file, stringsAsFactors = F)
if (is.null(filesam$V2)){
filesam$V2 <-1
}
filesam<-aggregate( V2  ~ V1, filesam, sum)
colnames(filesam)<-c("probe", paste0("count.",i))
tablelist[[i]]<-filesam
}
fasta<-read.table(args[4], stringsAsFactors = F)
fasta<-fasta[grep("^>", fasta$V1),]
fasta<-as.data.frame(sub(">", "", fasta ))
colnames(fasta)<-"probe"
tablelist[["fasta"]]<-fasta
summary_probes<-Reduce(function(x,y) merge(x = x, y = y, by = "probe", all=TRUE),
tablelist)
# Now with reads
summary_probes$code<-substr(summary_probes$probe, 1, 15)
reads<-read.table(args[2])
reads$code<-paste0(reads$V2, reads$V1, reads$V3)
reads_counted<-aggregate( V5  ~ code, reads, sum)
colnames(reads_counted)<-c("code", "count.qc")
summary_probes<-merge(summary_probes, reads_counted, by = "code", all = TRUE)
View(summary_probes)
args = commandArgs(trailingOnly=TRUE)
# Example
args[1]<-"tmp/2021-09-28_v2.3.2_IwantTMP/02_breakseq/" # Path with ini fil uni xun
args[2]<-"analysis/2021-09-28_v2.3.2_IwantTMP/03_processaligned/Results_reads.txt"  # Final read counts
args[3]<-"analysis/2021-09-28_v2.3.2_IwantTMP/04_qualityanalysis/" #Output path
args[4]<-"analysis/2021-09-28_v2.3.2_IwantTMP/data/datos_librerias/bplib.fa"
pathname<-args[1]
tablelist<-list()
for (i in c("ini", "fil", "xun", "uni")) {
file <- paste0(pathname, i, "sam_summary")
filesam<-read.table(file, stringsAsFactors = F)
if (is.null(filesam$V2)){
filesam$V2 <-1
}
filesam<-aggregate( V2  ~ V1, filesam, sum)
colnames(filesam)<-c("probe", paste0("count.",i))
tablelist[[i]]<-filesam
}
fasta<-read.table(args[4], stringsAsFactors = F)
fasta<-fasta[grep("^>", fasta$V1),]
fasta<-as.data.frame(sub(">", "", fasta ))
colnames(fasta)<-"probe"
tablelist[["fasta"]]<-fasta
summary_probes<-Reduce(function(x,y) merge(x = x, y = y, by = "probe", all=TRUE),
tablelist)
View(summary_probes)
pathname<-args[1]
tablelist<-list()
for (i in c("ini", "fil", "xun", "uni")) {
file <- paste0(pathname, i, "sam_summary")
filesam<-read.table(file, stringsAsFactors = F)
if (is.null(filesam$V2)){
filesam$V2 <-1
}
filesam<-aggregate( V2  ~ V1, filesam, sum)
colnames(filesam)<-c("probe", paste0("count.",i))
tablelist[[i]]<-filesam
}
fasta<-read.table(args[4], stringsAsFactors = F)
fasta<-fasta[grep("^>", fasta$V1),]
fasta<-as.data.frame(sub(">", "", fasta ))
colnames(fasta)<-"probe"
tablelist[["fasta"]]<-fasta
summary_probes<-Reduce(function(x,y) merge(x = x, y = y, by = "probe", all=TRUE),
tablelist)
# Now with reads
summary_probes$code<-substr(summary_probes$probe, 1, 15)
reads<-read.table(args[2])
reads$code<-paste0(reads$V2, reads$V1, reads$V3)
reads_counted<-aggregate( V5  ~ code, reads, sum)
colnames(reads_counted)<-c("code", "count.qc")
summary_probes<-merge(summary_probes, reads_counted, by = "code", all = TRUE)
View(summary_probes)
reads<-read.table(args[2])
View(reads)
reads$code<-paste0(reads$V2, reads$V1, reads$V3)
reads_counted<-aggregate( V5  ~ code, reads, sum)
View(reads_counted)
colnames(reads_counted)<-c("code", "count.qc")
summary_probes<-merge(summary_probes, reads_counted, by = "code", all = TRUE)
colnames(reads_counted)<-c("probe", "count.qc")
summary_probes<-merge(summary_probes, reads_counted, by = "code", all = TRUE)
summary_probes<-merge(summary_probes, reads_counted, by = "probe", all = TRUE)
View(summary_probes)
pathname<-args[1]
tablelist<-list()
for (i in c("ini", "fil", "xun", "uni")) {
file <- paste0(pathname, i, "sam_summary")
filesam<-read.table(file, stringsAsFactors = F)
if (is.null(filesam$V2)){
filesam$V2 <-1
}
filesam<-aggregate( V2  ~ V1, filesam, sum)
colnames(filesam)<-c("probe", paste0("count.",i))
tablelist[[i]]<-filesam
}
fasta<-read.table(args[4], stringsAsFactors = F)
fasta<-fasta[grep("^>", fasta$V1),]
fasta<-as.data.frame(sub(">", "", fasta ))
colnames(fasta)<-"probe"
tablelist[["fasta"]]<-fasta
summary_probes<-Reduce(function(x,y) merge(x = x, y = y, by = "probe", all=TRUE),
tablelist)
# Now with reads
# summary_probes$code<-substr(summary_probes$probe, 1, 15)
reads<-read.table(args[2])
reads$code<-paste0(reads$V2, reads$V1, reads$V3)
reads_counted<-aggregate( V5  ~ code, reads, sum)
colnames(reads_counted)<-c("probe", "count.qc")
summary_probes<-merge(summary_probes, reads_counted, by = "probe", all = TRUE)
# Look for errors!
# summary_probes$code[duplicated(summary_probes$code)]
summary_probes[is.na(summary_probes)]<-0
summary_probes$code<-NULL
View(summary_probes)
View(reads_counted)
View(reads_counted)
summary_probes[is.na(summary_probes)]<-0
summary_probes$code<-NULL
# Mark statistically divergent probes
# without probes
summary_probes$diagnosis1<-ifelse(  summary_probes$count.qc == 0 ,
(ifelse(substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"), "emptyRef", "emptyAlt"))
, NA)
#  undetected or filtered
summary_probes$diagnosis2<-ifelse(summary_probes$count.ini == 0, "failedDetection,",
ifelse(summary_probes$count.fil == 0, "allFiltered", NA))
# Error match
summary_probes$diagnosis3<-ifelse( substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"),
# if is std,
ifelse(summary_probes$count.uni != 0, "errorMatches", NA),
# if is alt
ifelse(summary_probes$count.xun != 0, "errorMatches", NA)
)
# Merge
summary_probes$diagnosis<-paste(summary_probes$diagnosis1, summary_probes$diagnosis2, summary_probes$diagnosis3, sep  =",")
summary_probes$diagnosis<-gsub("NA" ,"", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub(",," ,",", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub("^," ,"", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub(",$" ,"", summary_probes$diagnosis)
summary_probes$diagnosis1<-summary_probes$diagnosis2<-summary_probes$diagnosis3<-NULL
# without probes
summary_probes$diagnosis1<-ifelse( (summary_probes$count.xun == 0) & (substr(summary_probes$probe, 1, 3) %in% c("STD", "REF")), emptyRef, NA)
summary_probes$diagnosis1<-ifelse( (summary_probes$count.uni == 0) & !(substr(summary_probes$probe, 1, 3) %in% c("STD", "REF")), emptyAlt, NA)
# without probes
summary_probes$diagnosis1<-ifelse( (summary_probes$count.xun == 0) & (substr(summary_probes$probe, 1, 3) %in% c("STD", "REF")), "emptyRef", NA)
summary_probes$diagnosis1<-ifelse( (summary_probes$count.uni == 0) & !(substr(summary_probes$probe, 1, 3) %in% c("STD", "REF")), "emptyAlt", NA)
summary_probes[which((summary_probes$count.xun == 0) & (substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"))), "diagnosis1"]<-"emptyRef"
summary_probes[which((summary_probes$count.uni == 0) & !(substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"))), "diagnosis1"]<-"emptyAlt"
summary_probes$diagnosis1<- NA
summary_probes[which((summary_probes$count.xun == 0) & (substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"))), "diagnosis1"]<-"emptyRef"
summary_probes[which((summary_probes$count.uni == 0) & !(substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"))), "diagnosis1"]<-"emptyAlt"
#  undetected or filtered
summary_probes$diagnosis2<-ifelse(summary_probes$count.ini == 0, "failedDetection,",
ifelse(summary_probes$count.fil == 0, "allFiltered", NA))
# Error match
summary_probes$diagnosis3<-ifelse( substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"),
# if is std,
ifelse(summary_probes$count.uni != 0, "errorMatches", NA),
# if is alt
ifelse(summary_probes$count.xun != 0, "errorMatches", NA)
)
#  undetected or filtered
summary_probes$diagnosis2<-ifelse(summary_probes$count.ini == 0, "failedDetection",
ifelse(summary_probes$count.fil == 0, "allFiltered", NA))
# Error match
summary_probes$diagnosis3<-ifelse( substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"),
# if is std,
ifelse(summary_probes$count.uni != 0, "errorMatches", NA),
# if is alt
ifelse(summary_probes$count.xun != 0, "errorMatches", NA)
)
#  undetected or filtered
summary_probes$diagnosis2<-ifelse(summary_probes$count.ini == 0, "failedDetection",
ifelse(summary_probes$count.fil == 0, "allFiltered",
ifelse(summary_probes$count.qc == 0, "failedQC", NA)))
# Error match
summary_probes$diagnosis3<-ifelse( substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"),
# if is std,
ifelse(summary_probes$count.uni != 0, "errorMatches", NA),
# if is alt
ifelse(summary_probes$count.xun != 0, "errorMatches", NA)
)
# Merge
summary_probes$diagnosis<-paste(summary_probes$diagnosis1, summary_probes$diagnosis2, summary_probes$diagnosis3, sep  =",")
summary_probes$diagnosis<-gsub("NA" ,"", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub(",," ,",", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub("^," ,"", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub(",$" ,"", summary_probes$diagnosis)
summary_probes$diagnosis1<-summary_probes$diagnosis2<-summary_probes$diagnosis3<-NULL
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
# # # # Example
args[1]<-"analysis/2021-09-28_v2.3.2_IwantTMP/03_processaligned/GTypes_FinalDataSet.txt" # File with results
args[2]<-"analysis/2021-09-28_v2.3.2_IwantTMP/data/samples.txt"  # All sample names
args[3]<-"data/raw/GlobalInvGenotypes_v3.2_132Invs_20210528_Genotypes.csv" #InvFEST genotypes
args[4]<- "analysis/2021-09-28_v2.3.2_IwantTMP/04_qualityanalysis"
args[5]<-"analysis/2021-09-28_v2.3.2_IwantTMP/data/regions.txt"
args[6]<-0.03 # maximum error admitted
# # Test if there is at least one argument: if not, return an error
if (length(args)<6) {
stop("One input file, one sample names file, one reference genotypes file, one output directory, a regions list, a maximum error", call.=FALSE)
}
library(ggplot2)
library(reshape2)
library(grid)
g.ref<-read.table(args[3], sep = "\t", header = T, stringsAsFactors = F)
g.break<-read.table(args[1], header = T, stringsAsFactors = F)
inds<-read.table(args[2], stringsAsFactors = F)
invs<-read.table(args[5], stringsAsFactors = F)
# Tidy g.ref
# Remove unused columns and rows
inv.ref<-colnames(g.ref)[grep("Hs.*", colnames(g.ref))]
g.ref<-g.ref[which(g.ref$Sample.ID %in% inds$V1) ,c("Sample.ID", inv.ref)]
# Melt
g.ref<-reshape2::melt(g.ref, id.vars = c("Sample.ID") )
colnames(g.ref)<-c("Sample", "Inv", "Gtype_experimental")
# Filter g.ref
g.ref[which(g.ref$Gtype_experimental == "ND"), "Gtype_experimental"]<-NA
g.ref$Inv <- as.character(g.ref$Inv)
g.ref<-g.ref[which(g.ref$Inv %in% invs$V1),]
# Make all caps
g.ref$Gtype_experimental<-toupper(g.ref$Gtype_experimental)
# Filter g.break
colnames(g.break)[c(1,2)]<-c("Inv", "Sample")
g.break<-g.break[which(g.break$Inv %in% invs$V1),]
g.break.original<-g.break
# In experimental data
complete.cases<-g.ref[!is.na(g.ref$Gtype_experimental), ]
numinds.ref<-data.frame(table(complete.cases$Inv))
colnames(numinds.ref)<-c("Inv", "Numinds.geno.ref")
# In Breakseq data
numinds.break<-data.frame(table(g.break$Inv))
colnames(numinds.break)<-c("Inv", "Numinds.geno.break")
g.ref<-read.table(args[3], sep = "\t", header = T, stringsAsFactors = F)
g.break<-read.table(args[1], header = T, stringsAsFactors = F)
inds<-read.table(args[2], stringsAsFactors = F)
invs<-read.table(args[5], stringsAsFactors = F)
# Tidy g.ref
# Remove unused columns and rows
inv.ref<-colnames(g.ref)[grep("Hs.*", colnames(g.ref))]
g.ref<-g.ref[which(g.ref$Sample.ID %in% inds$V1) ,c("Sample.ID", inv.ref)]
# Melt
g.ref<-reshape2::melt(g.ref, id.vars = c("Sample.ID") )
colnames(g.ref)<-c("Sample", "Inv", "Gtype_experimental")
# Filter g.ref
g.ref[which(g.ref$Gtype_experimental == "ND"), "Gtype_experimental"]<-NA
g.ref$Inv <- as.character(g.ref$Inv)
g.ref<-g.ref[which(g.ref$Inv %in% invs$V1),]
# Make all caps
g.ref$Gtype_experimental<-toupper(g.ref$Gtype_experimental)
# Filter g.break
colnames(g.break)[c(1,2)]<-c("Inv", "Sample")
g.break<-g.break[which(g.break$Inv %in% invs$V1),]
g.break.original<-g.break
# In experimental data
complete.cases<-g.ref[!is.na(g.ref$Gtype_experimental), ]
complete.cases
View(g.ref)
g.ref<-read.table(args[3], sep = "\t", header = T, stringsAsFactors = F)
View(g.ref)
g.break<-read.table(args[1], header = T, stringsAsFactors = F)
g.break
inds<-read.table(args[2], stringsAsFactors = F)
inds
invs<-read.table(args[5], stringsAsFactors = F)
invs
# Tidy g.ref
# Remove unused columns and rows
inv.ref<-colnames(g.ref)[grep("Hs.*", colnames(g.ref))]
inv.ref
g.ref<-g.ref[which(g.ref$Sample.ID %in% inds$V1) ,c("Sample.ID", inv.ref)]
g.ref
# Melt
g.ref<-reshape2::melt(g.ref, id.vars = c("Sample.ID") )
g.ref
g.ref<-read.table(args[3], sep = "\t", header = T, stringsAsFactors = F)
g.break<-read.table(args[1], header = T, stringsAsFactors = F)
inds<-read.table(args[2], stringsAsFactors = F)
invs<-read.table(args[5], stringsAsFactors = F)
# Tidy g.ref
# Remove unused columns and rows
inv.ref<-colnames(g.ref)[grep("Hs.*", colnames(g.ref))]
g.ref<-g.ref[which(g.ref$Sample.ID %in% inds$V1) ,c("Sample.ID", inv.ref)]
inds$V1
g.ref$Sample.ID
rc<-read.table("analysis/2021-09-20_v2.3.2_downloadReadsCheck/01_download/readscount.txt")
View(rc)
rc<-read.table("analysis/2021-09-20_v2.3.2_downloadReadsCheck/01_download/readscount.txt", sep = ",")
View(rc)
aggregate( V1  ~ V2  , rc, "sum" )
aggregate( V1  ~ V2  , rc, sum )
rc<-read.table("analysis/2021-09-20_v2.3.2_downloadReadsCheck/01_download/readscount.txt", sep = ",", stringsAsFactors = F)
aggregate( V1  ~ V2  , rc, sum )
rc$V3 <- as.numeric(rc$V3)
aggregate( V1  ~ V2  , rc, sum )
aggregate( V3  ~ V2, rc , sum )
table<-aggregate( V3  ~ V2, rc , sum )
write.table(table, "analysis/2021-09-20_v2.3.2_downloadReadsCheck/01_download/readsaggregated.txt")
write.table(table, "analysis/2021-09-20_v2.3.2_downloadReadsCheck/01_download/readsaggregated.txt", quote = F, row.names = F, col.names = F)
write.table(table, "analysis/2021-09-20_v2.3.2_downloadReadsCheck/01_download/readsaggregated.txt", quote = F, row.names = F, col.names = F, sep = ",")
args[4]
# + Summary for downloads
path<-gsub("04_qualityanalysis",args[3])
# LOAD ARGUMENTS
# =========================================================================== #
args = commandArgs(trailingOnly=TRUE)
args[1]<-"tmp/2021-09-28_v2.3.2_IwantTMP/02_breakseq/" # Path with ini fil uni xun
args[2]<-"analysis/2021-09-28_v2.3.2_IwantTMP/03_processaligned/Results_reads.txt"  # Final read counts
args[3]<-"analysis/2021-09-28_v2.3.2_IwantTMP/04_qualityanalysis/" #Output path
args[4]<-"analysis/2021-09-28_v2.3.2_IwantTMP/data/datos_librerias/bplib.fa"
# + Summary for downloads
path<-gsub("04_qualityanalysis",args[3])
# + Summary for downloads
path<-gsub("04_qualityanalysis","",args[3])
path
# + Summary for downloads
path<-gsub("04_qualityanalysis/","",args[3])
path
readcounts<-read.table(paste0(path,"01_download/readscount.txt")), sep = ",", stringsAsFactors = F)
readcounts<-read.table(paste0(path,"01_download/readscount.txt"), sep = ",", stringsAsFactors = F)
rc<-read.table("analysis/2021-09-20_v2.3.2_downloadReadsCheck/01_download/readscount.txt", sep = ",", stringsAsFactors = F)
path<-"analysis/2021-09-29_v2.3.2_deftest/"
readcounts<-read.table(paste0(path,"01_download/readscount.txt"), sep = ",", stringsAsFactors = F)
readcounts
as.numeric(readcounts$V3)
readcounts_agg<-aggregate( V3  ~ V2, rc , sum )
readcounts_agg
View(readcounts)
args = commandArgs(trailingOnly=TRUE)
# Example
args[1]<-"tmp/2021-09-29_v2.3.2_deftest/02_breakseq/" # Path with ini fil uni xun
args[2]<-"analysis/2021-09-29_v2.3.2_deftest/03_processaligned/Results_reads.txt"  # Final read counts
args[3]<-"analysis/2021-09-29_v2.3.2_deftest/04_qualityanalysis/" #Output path
args[4]<-"analysis/2021-09-29_v2.3.2_deftest/data/datos_librerias/bplib.fa"
#
# LOAD PACKAGES
# =========================================================================== #
# library(ggplot2)
# library(reshape2)
# library(grid)
#####################
pathname<-args[1]
tablelist<-list()
for (i in c("ini", "fil", "xun", "uni")) {
file <- paste0(pathname, i, "sam_summary")
filesam<-read.table(file, stringsAsFactors = F)
if (is.null(filesam$V2)){
filesam$V2 <-1
}
filesam<-aggregate( V2  ~ V1, filesam, sum)
colnames(filesam)<-c("probe", paste0("count.",i))
tablelist[[i]]<-filesam
}
fasta<-read.table(args[4], stringsAsFactors = F)
fasta<-fasta[grep("^>", fasta$V1),]
fasta<-as.data.frame(sub(">", "", fasta ))
colnames(fasta)<-"probe"
tablelist[["fasta"]]<-fasta
summary_probes<-Reduce(function(x,y) merge(x = x, y = y, by = "probe", all=TRUE),
tablelist)
# Now with reads
# summary_probes$code<-substr(summary_probes$probe, 1, 15)
reads<-read.table(args[2])
reads$code<-paste0(reads$V2, reads$V1, reads$V3)
reads_counted<-aggregate( V5  ~ code, reads, sum)
colnames(reads_counted)<-c("probe", "count.qc")
summary_probes<-merge(summary_probes, reads_counted, by = "probe", all = TRUE)
# Look for errors!
# summary_probes$code[duplicated(summary_probes$code)]
summary_probes[is.na(summary_probes)]<-0
summary_probes$code<-NULL
# Mark statistically divergent probes
# without probes
summary_probes$diagnosis1<- NA
summary_probes[which((summary_probes$count.xun == 0) & (substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"))), "diagnosis1"]<-"emptyRef"
summary_probes[which((summary_probes$count.uni == 0) & !(substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"))), "diagnosis1"]<-"emptyAlt"
#  undetected or filtered
summary_probes$diagnosis2<-ifelse(summary_probes$count.ini == 0, "failedDetection",
ifelse(summary_probes$count.fil == 0, "allFiltered",
ifelse(summary_probes$count.qc == 0, "failedQC", NA)))
# Error match
summary_probes$diagnosis3<-ifelse( substr(summary_probes$probe, 1, 3) %in% c("STD", "REF"),
# if is std,
ifelse(summary_probes$count.uni != 0, "errorMatches", NA),
# if is alt
ifelse(summary_probes$count.xun != 0, "errorMatches", NA)
)
# Merge
summary_probes$diagnosis<-paste(summary_probes$diagnosis1, summary_probes$diagnosis2, summary_probes$diagnosis3, sep  =",")
summary_probes$diagnosis<-gsub("NA" ,"", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub(",," ,",", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub("^," ,"", summary_probes$diagnosis)
summary_probes$diagnosis<-gsub(",$" ,"", summary_probes$diagnosis)
summary_probes$diagnosis1<-summary_probes$diagnosis2<-summary_probes$diagnosis3<-NULL
View(summary_probes)
pathname<-args[1]
tablelist<-list()
for (i in c("ini", "fil", "xun", "uni")) {
file <- paste0(pathname, i, "sam_summary")
filesam<-read.table(file, stringsAsFactors = F)
if (is.null(filesam$V2)){
filesam$V2 <-1
}
filesam<-aggregate( V2  ~ V1, filesam, sum)
colnames(filesam)<-c("probe", paste0("count.",i))
tablelist[[i]]<-filesam
}
fasta<-read.table(args[4], stringsAsFactors = F)
fasta<-fasta[grep("^>", fasta$V1),]
fasta<-as.data.frame(sub(">", "", fasta ))
colnames(fasta)<-"probe"
tablelist[["fasta"]]<-fasta
summary_probes<-Reduce(function(x,y) merge(x = x, y = y, by = "probe", all=TRUE),
tablelist)
# Now with reads
# summary_probes$code<-substr(summary_probes$probe, 1, 15)
reads<-read.table(args[2])
reads$code<-paste0(reads$V2, reads$V1, reads$V3)
reads_counted<-aggregate( V5  ~ code, reads, sum)
colnames(reads_counted)<-c("probe", "count.qc")
summary_probes<-merge(summary_probes, reads_counted, by = "probe", all = TRUE)
# Look for errors!
# summary_probes$code[duplicated(summary_probes$code)]
summary_probes[is.na(summary_probes)]<-0
summary_probes$code<-NULL
# Mark statistically divergent probes
read.table("analysis/2021-09-29_v2.3.2_deftest/04_qualityanalysis/readFiltering.txt")
read.table("analysis/2021-09-29_v2.3.2_deftest/04_qualityanalysis/readFiltering.txt", sep = \t")
read.table("analysis/2021-09-29_v2.3.2_deftest/04_qualityanalysis/readFiltering.txt", sep = \t)
read.table("analysis/2021-09-29_v2.3.2_deftest/04_qualityanalysis/readFiltering.txt", sep = "\t")
summary_probes<-read.table("analysis/2021-09-29_v2.3.2_deftest/04_qualityanalysis/readFiltering.txt", sep = "\t")
View(summary_probes)
summary_probes<-read.table("analysis/2021-09-29_v2.3.2_deftest/04_qualityanalysis/readFiltering.txt", sep = "\t", header = T)
View(summary_probes)
substr(summary_probes$probe, 4, 6)
substr(summary_probes$probe, 4, 10)
substr(summary_probes$probe, 4, 12)
# Sort and clean for manual analysis
summary_probes$inversion<-substr(summary_probes$probe, 4, 12)
summary_probes[order(summary_probes$inversion, summary_probes$probe), c(2:8, 1)]
summary_probes[order(summary_probes$inversion, summary_probes$probe), c(8, 1:7)]
summary_probes<-summary_probes[order(summary_probes$inversion, summary_probes$probe), c(8, 1:7)]
write.table(summary_probes, paste0(args[3], "/readFiltering.txt"), quote = F, sep = "\t", row.names = F)
